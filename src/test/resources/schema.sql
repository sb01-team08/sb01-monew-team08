-- USERS
CREATE TABLE USERS
(
    ID         UUID PRIMARY KEY,
    EMAIL      VARCHAR(50)  NOT NULL UNIQUE,
    NICKNAME   VARCHAR(30)  NOT NULL,
    PASSWORD   VARCHAR(100) NOT NULL,
    IS_ACTIVE  BOOLEAN   DEFAULT TRUE,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP,
    DELETED_AT TIMESTAMP
);

-- INTERESTS
CREATE TABLE INTERESTS
(
    ID               UUID PRIMARY KEY,
    NAME             VARCHAR(50) NOT NULL,
    SUBSCRIBER_COUNT INT,
    CREATED_AT       TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT       TIMESTAMP
);

CREATE TABLE INTEREST_KEYWORDS
(
    INTEREST_ID UUID NOT NULL,
    KEYWORDS    VARCHAR(255),
    FOREIGN KEY (interest_id) REFERENCES interests (id) ON DELETE CASCADE
);


-- USER_INTEREST_SUBSCRIPTIONS
CREATE TABLE USER_INTEREST_SUBSCRIPTIONS
(
    ID                UUID PRIMARY KEY,
    USER_ID           UUID NOT NULL,
    INTEREST_ID       UUID NOT NULL,
    SUBSCRIPTION_DATE DATE DEFAULT CURRENT_DATE,
    FOREIGN KEY (USER_ID) REFERENCES USERS (ID) ON DELETE CASCADE,
    FOREIGN KEY (INTEREST_ID) REFERENCES INTERESTS (ID) ON DELETE CASCADE
);

-- ARTICLES
CREATE TABLE ARTICLES
(
    ID           UUID PRIMARY KEY,
    SOURCE       VARCHAR(50),
    SOURCE_URL   VARCHAR(300) UNIQUE,
    TITLE        VARCHAR(300),
    PUBLISH_DATE TIMESTAMP,
    SUMMARY      TEXT,
    VIEW_COUNT   BIGINT  DEFAULT 0,
    IS_ACTIVE    BOOLEAN DEFAULT TRUE,
    INTEREST_ID  UUID, -- todo: 추후 NOT NULL로 수정해야 함
    FOREIGN KEY (INTEREST_ID) REFERENCES INTERESTS (id)
);

-- USER_ARTICLE_VIEWS
CREATE TABLE USER_ARTICLE_VIEWS
(
    ID         UUID PRIMARY KEY,
    USER_ID    UUID NOT NULL,
    ARTICLE_ID UUID NOT NULL,
    VIEWED_AT  TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT UNIQUE_USER_ARTICLE UNIQUE (USER_ID, ARTICLE_ID),
    FOREIGN KEY (USER_ID) REFERENCES USERS (ID) ON DELETE CASCADE,
    FOREIGN KEY (ARTICLE_ID) REFERENCES ARTICLES (ID) ON DELETE CASCADE
);

-- ARTICLE_INTEREST
CREATE TABLE ARTICLE_INTEREST
(
    ARTICLE_ID  UUID NOT NULL,
    INTEREST_ID UUID NOT NULL,
    PRIMARY KEY (ARTICLE_ID, INTEREST_ID),
    FOREIGN KEY (ARTICLE_ID) REFERENCES ARTICLES (ID) ON DELETE CASCADE,
    FOREIGN KEY (INTEREST_ID) REFERENCES INTERESTS (ID) ON DELETE CASCADE
);

-- COMMENTS
CREATE TABLE COMMENTS
(
    ID         UUID PRIMARY KEY,
    ARTICLE_ID UUID NOT NULL,
    USER_ID    UUID NOT NULL,
    CONTENT    TEXT,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP,
    IS_ACTIVE  BOOLEAN   DEFAULT TRUE,
    LIKE_COUNT INT       DEFAULT 0,
    FOREIGN KEY (ARTICLE_ID) REFERENCES ARTICLES (ID) ON DELETE CASCADE,
    FOREIGN KEY (USER_ID) REFERENCES USERS (ID) ON DELETE CASCADE
);

-- COMMENT_LIKES
CREATE TABLE COMMENT_LIKES
(
    ID         UUID PRIMARY KEY,
    USER_ID    UUID NOT NULL,
    COMMENT_ID UUID NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP,
    CONSTRAINT UNIQUE_USER_COMMENT_LIKE UNIQUE (USER_ID, COMMENT_ID),
    FOREIGN KEY (USER_ID) REFERENCES USERS (ID) ON DELETE CASCADE,
    FOREIGN KEY (COMMENT_ID) REFERENCES COMMENTS (ID) ON DELETE CASCADE
);

-- USER_ACTIVITY_LOG
CREATE TABLE USER_ACTIVITY_LOG
(
    ID         UUID PRIMARY KEY,
    USER_ID    UUID NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (USER_ID) REFERENCES USERS (ID) ON DELETE CASCADE
);

-- NEWS_VIEW_LOG
-- articleCommentCount와 articleViewCount는 실시간 가져오기
CREATE TABLE NEWS_VIEW_LOG
(
    ID                     UUID PRIMARY KEY,
    ACTIVITY_LOG_ID        UUID NOT NULL,
    CREATED_AT             TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    ARTICLE_ID             UUID NOT NULL,
    VIEWED_BY              UUID NOT NULL,
    SOURCE                 VARCHAR(50),
    SOURCE_URL             VARCHAR(300),
    ARTICLE_TITLE          VARCHAR(300),
    ARTICLE_PUBLISHED_DATE TIMESTAMP,
    ARTICLE_SUMMARY        TEXT,
    CONSTRAINT UNIQUE_NEWS_VIEW_LOG UNIQUE (ACTIVITY_LOG_ID, ARTICLE_ID),
    FOREIGN KEY (ACTIVITY_LOG_ID) REFERENCES USER_ACTIVITY_LOG (ID) ON DELETE CASCADE
);

-- COMMENT_LIKE_LOG
-- commnetLikeCount의 경우는 join으로 실시간 가져오기
CREATE TABLE COMMENT_LIKE_LOG
(
    ID                    UUID PRIMARY KEY,
    ACTIVITY_LOG_ID       UUID NOT NULL,
    CREATED_AT            TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    COMMENT_ID            UUID NOT NULL,
    ARTICLE_ID            UUID NOT NULL,
    ARTICLE_TITLE         VARCHAR(300),
    COMMENT_USER_ID       UUID NOT NULL,
    COMMENT_USER_NICKNAME VARCHAR(30),
    COMMENT_CONTENT       TEXT,
    COMMENT_CREATED_AT    TIMESTAMP,
    CONSTRAINT UNIQUE_COMMENT_LIKE_LOG UNIQUE (ACTIVITY_LOG_ID, COMMENT_ID),
    FOREIGN KEY (ACTIVITY_LOG_ID) REFERENCES USER_ACTIVITY_LOG (ID) ON DELETE CASCADE
);


-- COMMENT_RECENT_LOG
-- likeCount의 경우는 join으로 실시간 가져오기
CREATE TABLE COMMENT_RECENT_LOG
(
    ID                 UUID PRIMARY KEY,
    ACTIVITY_LOG_ID    UUID NOT NULL,
    CREATED_AT         TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    COMMENT_ID         UUID NOT NULL,
    ARTICLE_ID         UUID NOT NULL,
    ARTICLE_TITLE      VARCHAR(300),
    USER_ID            UUID NOT NULL,
    USER_NICKNAME      VARCHAR(30),
    CONTENT            TEXT,
    COMMENT_CREATED_AT TIMESTAMP,
    CONSTRAINT UNIQUE_COMMENT_RECENT_LOG UNIQUE (ACTIVITY_LOG_ID, COMMENT_ID),
    FOREIGN KEY (ACTIVITY_LOG_ID) REFERENCES USER_ACTIVITY_LOG (ID) ON DELETE CASCADE
);

-- NOTIFICATIONS
CREATE TABLE notifications
(
    ID            UUID PRIMARY KEY,
    USER_ID       UUID        NOT NULL,
    CONTENT       TEXT        NOT NULL,
    RESOURCE_TYPE VARCHAR(30) NOT NULL,
    RESOURCE_ID   UUID        NOT NULL,
    IS_CONFIRMED  BOOLEAN   DEFAULT FALSE,
    CREATED_AT    TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT    TIMESTAMP,
    CONSTRAINT fk_notification_user
        FOREIGN KEY (user_id) REFERENCES users (id)
);
