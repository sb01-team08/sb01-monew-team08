plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.4'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
}

test {
    useJUnitPlatform()
    if (System.getProperty("excludeTags")) {
        useJUnitPlatform {
            excludeTags System.getProperty("excludeTags")
        }
    }
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
    }
    // Q클래스 등 자동 생성 코드 제외
    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, exclude: [
                            '**/Q*.class',                        // QueryDSL Q클래스
                            '**/generated/**',                   // generated 경로
                            '**/com/example/monewteam08/mapper/**',              // mapper 패키지 제외
                            '**/com/example/monewteam08/scheduler/**',            // scheduler 패키지 제외
                    ])
                })
        )
    }
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // --- 스프링 부트
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-logging'
    implementation 'org.springframework.boot:spring-boot-starter-batch'

    // --- Swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0'

    // --- AWS S3
    implementation platform('software.amazon.awssdk:bom:2.20.62')
    implementation 'software.amazon.awssdk:s3'
    testImplementation 'io.projectreactor:reactor-test'

    // --- Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // --- DB
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.postgresql:postgresql'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'

    // --- Test
    testImplementation 'com.h2database:h2'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'org.springframework.batch:spring-batch-test'

    // --- RSS Tool (기사 수집에 사용)
    implementation 'com.rometools:rome:2.1.0'

    //---CSV
    implementation 'com.opencsv:opencsv:5.7.1'

    //---Micrometer
    implementation 'io.micrometer:micrometer-core'

    //QueryDsl
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    implementation 'jakarta.persistence:jakarta.persistence-api:3.1.0'
    compileOnly 'jakarta.persistence:jakarta.persistence-api:3.1.0'
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api:3.1.0'
}

def querydslDir = "$buildDir/generated/querydsl"

sourceSets {
    main {
        java {
            srcDirs += querydslDir
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += [
            "-Aquerydsl.generatedSourcesDir=$querydslDir"
    ]
}
clean {
    delete file(querydslDir)
}

bootJar {
    layered {}
    archiveFileName = "${project.name}-${project.version}.jar"
}